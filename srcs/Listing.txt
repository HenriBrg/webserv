-------- Serveur --------

select : select   attend   des  changements  d'état  sur  plusieurs descripteurs (sockets, tubes, périphériques) de fichiers.
La grande force de select() est que l’attente est passive : tant qu’aucune condition n’est réalisée, la tâche appelante est endormie.

	- int select(int nfds, fd_set *readfds, fd_set *writefds,
           fd_set *exceptfds, struct timeval *timeout);

socket : crée un point de communication et renvoie un descripteur. Le paramètre domain indique le domaine de communication pour le dialogue ; ceci sélectionne la famille de protocole à employer.

	- int socket(int domain, int type, int protocol);



accept : Accepter une connexion sur une socket
	- int accept(int sockfd, struct sockaddr *adresse, socklen_t *longueur);


listen : Attendre des connexions sur une socket. listen() marque la socket référencée par sockfd comme une socket passive, c'est-à-dire comme une socket qui sera utilisée pour accepter les demandes de connexions entrantes en utilisant accept(2).


send : Envoyer un message sur une socket
	- send(int s, const void *buf, size_t len, int flags);

recv : Recevoir un message sur une socket

bind : Fournir un nom à une socket. Quand une socket est créée avec l'appel système socket(2), elle existe dans l'espace des noms mais n'a pas de nom assigné). bind() affecte l'adresse spécifiée dans addr à la socket référencée par le descripteur de fichier sockfd
	- int bind(int sockfd, const struct sockaddr *addr,
         socklen_t addrlen);

connect : Débuter une connexion sur une socket

inet_addr : La fonction inet_addr() convertit l'adresse Internet de l'hôte cp depuis la notation numérique pointée IPV4 en une donnée binaire dans l'ordre des octets du réseau.
	- in_addr_t inet_addr(const char *cp);

setsockopt : manipulent les options associées à une socket

getsockname : renvoie le nom name de la socket indiquée
	- int getsockname(int s, struct sockaddr *name, socklen_t *namelen)

fcntl : Manipuler un descripteur de fichier


------ Autres ------

unlink = détruire un nom et éventuellement le fichier associé
	- int unlink(const char *pathname);

wait / waitpid = attendre qu'un processus change d'état
wait3 / wait4 =  idem mais retourne + d'infos sur le processus fils

signal =  installe le gestionnaire handler pour le signal signum
	- signal(int signum, sighandler_t handler);

stat, lstat, fstat = Obtenir l'état d'un fichier (file status)

lseek : Positionner la tête de lecture/écriture dans un fichier
opendir / readdir / closedir : voir example

strptime : Conversion d'une chaîne de date en une structure tm
strftime : voir example

dup, dup2, pipe, execve, strerror, errno : voir minishell
gettimeofday : voir philo
